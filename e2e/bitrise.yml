format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  test_objc:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc-with-uitest.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - TEST_PLAN: ""
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "false"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "none"
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_objc_xcpretty:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc-with-uitest.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - TEST_PLAN: ""
    - XCODE_SIMULATOR_DEVICE: iPhone 8
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcpretty
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "none"
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts
    - _check_xcpretty_html_report

  test_failing_ui_test:
    steps:
    - script:
        title: Start a failing workflow, wrapped in a script.
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_objc_failing_ui_test
            if [ $? -ne 1 ] ; then
              echo "Workflow was excepted to fail, exit code not 1."
              exit 1
            fi

  utility_objc_failing_ui_test:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc-with-uitest.git
    - TEST_APP_BRANCH: failing-ui-test
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - TEST_PLAN: ""
    - XCODE_SIMULATOR_DEVICE: iPhone 8
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "yes"
    - EXPECT_TEST_FAILURE: "true"
    - CACHE_LEVEL: "none"
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  test_parallel:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"

            device="iPad Air (4th generation)"
            if [[ ${XCODE_MAJOR_VERSION} -eq 11 ]]; then
              device="iPad Air (3rd generation)"
            elif [[ ${XCODE_MAJOR_VERSION} -eq 12 ]]; then
              device="iPad Air (4th generation)"
            elif [[ ${XCODE_MAJOR_VERSION} -eq 13 ]]; then
              device="iPad Air (4th generation)"
            fi

            echo "Xcode version based iPad device: $device"
            envman add --key XCODE_SIMULATOR_DEVICE --value "$device"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true"}}'
        inputs:
        - workflow_id: utility_test_parallel
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_parallel:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: ""
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _run
    - _check_outputs
    - _check_cache

  test_test_plan:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_11 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_11" "true"}}'
        inputs:
        - workflow_id: utility_test_test_plan
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_test_plan:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "UnitTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 12
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _run
    - _check_outputs
    - _check_cache

  test_should_retry_test_on_fail_not_available_above_xcode_13:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_should_retry_test_on_fail_not_available_above_xcode_13
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_should_retry_test_on_fail_not_available_above_xcode_13:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "yes"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _run

  test_test_repetition_mode_not_available_below_xcode_13:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -gt 12 ]]; then
              echo "This test case requires Xcode <= 12, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_MOST_12 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_MOST_12" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_not_available_below_xcode_13
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_not_available_below_xcode_13:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - TEST_REPETITION_MODE: "retry_on_failure"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _run

  test_relaunch_tests_for_each_repetition_not_available_if_test_repetition_mode_is_none:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_relaunch_tests_for_each_repetition_not_available_if_test_repetition_mode_is_none
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_relaunch_tests_for_each_repetition_not_available_if_test_repetition_mode_is_none:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - TEST_REPETITION_MODE: "none"
    - RELAUNCH_TESTS_FOR_EACH_REPETITION: "yes"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _run

  test_should_retry_test_on_fail_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            elif [[ $XCODE_MAJOR_VERSION -gt 12 ]]; then
              echo "This test case requires Xcode <= 12, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_BETWEEN_11_AND_12 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_BETWEEN_11_AND_12" "true"}}'
        inputs:
        - workflow_id: utility_test_should_retry_test_on_fail_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_should_retry_test_on_fail_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 1
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "yes"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_should_retry_test_on_fail_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            elif [[ $XCODE_MAJOR_VERSION -gt 12 ]]; then
              echo "This test case requires Xcode <= 12, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_BETWEEN_11_AND_12 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_BETWEEN_11_AND_12" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_should_retry_test_on_fail_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_should_retry_test_on_fail_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 2
    - EXPECT_TEST_FAILURE: "true"
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "yes"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_should_retry_test_on_fail_off:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 11 ]]; then
              echo "This test case requires Xcode >= 11, skipping..."
              exit 0
            elif [[ $XCODE_MAJOR_VERSION -gt 12 ]]; then
              echo "This test case requires Xcode <= 12, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_BETWEEN_11_AND_12 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_BETWEEN_11_AND_12" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_should_retry_test_on_fail_off
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_should_retry_test_on_fail_off:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 1
    - EXPECT_TEST_FAILURE: "true"
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 12
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_retry_on_failure_2_iterations_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - workflow_id: utility_test_test_repetition_mode_retry_on_failure_2_iterations_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_test_repetition_mode_retry_on_failure_2_iterations_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 1
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "retry_on_failure"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_retry_on_failure_2_iterations_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_retry_on_failure_2_iterations_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_retry_on_failure_2_iterations_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "retry_on_failure"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "true"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_retry_on_failure_3_iterations_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - workflow_id: utility_test_test_repetition_mode_retry_on_failure_3_iterations_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_test_repetition_mode_retry_on_failure_3_iterations_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallySucceedingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "retry_on_failure"
    - MAXIMUM_TEST_REPETITIONS: 3
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_failures_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_until_failure_2_iterations_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - workflow_id: utility_test_test_repetition_mode_until_failure_2_iterations_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_test_repetition_mode_until_failure_2_iterations_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "until_failure"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_until_failure_2_iterations_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_until_failure_2_iterations_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_until_failure_2_iterations_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 1
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "until_failure"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "true"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_until_failure_3_iterations_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_until_failure_3_iterations_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_until_failure_3_iterations_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "until_failure"
    - MAXIMUM_TEST_REPETITIONS: 3
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - workflow_id: utility_test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "up_until_maximum_repetitions"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_up_until_maximum_repetitions_2_iterations_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 1
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "up_until_maximum_repetitions"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "true"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_test_repetition_mode_up_until_maximum_repetitions_3_iterations_fails:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - script:
        title: Start a failing workflow, wrapped in a script.
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - content: |-
            #!/bin/env bash
            set -x # Do not set -e as bitrise command is expected to fail
            bitrise run --config=./e2e/bitrise.yml utility_test_test_repetition_mode_up_until_maximum_repetitions_3_iterations_fails
            if [ $? -ne 1 ] ; then
              echo "Workflow was expected to fail, exit code not 1."
              exit 1
            fi

  utility_test_test_repetition_mode_up_until_maximum_repetitions_3_iterations_fails:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 2
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "up_until_maximum_repetitions"
    - MAXIMUM_TEST_REPETITIONS: 3
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_relaunch_tests_for_each_repetition_succeeds:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode >= 13, skipping..."
              exit 0
            fi
            envman add --key XCODE_MAJOR_VERSION_AT_LEAST_13 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_AT_LEAST_13" "true"}}'
        inputs:
        - workflow_id: utility_test_relaunch_tests_for_each_repetition_succeeds
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_relaunch_tests_for_each_repetition_succeeds:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: 1
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: STEP-1205-eventually-failing-in-memory-tests
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: "EventuallyFailingInMemoryTests"
    - XCODE_SIMULATOR_DEVICE: iPhone 8 Plus
    - XCODE_SIMULATOR_OS_VERSION: "latest"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - TEST_REPETITION_MODE: "up_until_maximum_repetitions"
    - MAXIMUM_TEST_REPETITIONS: 2
    - RELAUNCH_TESTS_FOR_EACH_REPETITION: "yes"
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "swift_packages"
    after_run:
    - _set_number_of_initial_test_successes_in_test_app
    - _run
    - _check_outputs

  test_simulator_os_version:
    before_run:
    - _expose_xcode_version
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [[ ${XCODE_MAJOR_VERSION} -lt 13 ]]; then
              echo "This test case requires Xcode > 12, skipping..."
              exit 0
            fi

            envman add --key XCODE_MAJOR_VERSION_GREATER_THAN_12 --value "true"
    - bitrise-run:
        run_if: '{{enveq "XCODE_MAJOR_VERSION_GREATER_THAN_12" "true"}}'
        inputs:
        - workflow_id: utility_test_simulator_os_version
        - bitrise_config_path: ./e2e/bitrise.yml

  utility_test_simulator_os_version:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: ""
    - XCODE_SIMULATOR_DEVICE: iPhone 12
    - XCODE_SIMULATOR_OS_VERSION: "15.0"
    - XCODE_SIMULATOR_PLATFORM: iOS Simulator
    - SINGLE_BUILD: "true"
    - XCODE_OUTPUT_TOOL: xcodebuild
    - RETRY_ON_FAILURE: "no"
    - EXPECT_TEST_FAILURE: "false"
    - CACHE_LEVEL: "none"
    after_run:
    - _run
    - _check_outputs

  _set_number_of_initial_test_failures_in_test_app:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES: $TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES
    - XCODE_SIMULATOR_DEVICE: $XCODE_SIMULATOR_DEVICE
    - XCODE_SIMULATOR_OS_VERSION: $XCODE_SIMULATOR_OS_VERSION
    - XCODE_SIMULATOR_PLATFORM: $XCODE_SIMULATOR_PLATFORM
    steps:
    - git::https://github.com/bitrise-steplib/steps-lookup-xcode-simulator:
        inputs:
        - simulator_device: $XCODE_SIMULATOR_DEVICE
        - simulator_os_version: $XCODE_SIMULATOR_OS_VERSION
        - simulator_platform: $XCODE_SIMULATOR_PLATFORM
    - script:
        title: Set number of flaky test number of initial failures on the Simulator for the app io.bitrise.BullsEye
        inputs:
        - content: |-
            set -ex
            if [[ -x $TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES ]]; then
              echo "Variable TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES is unset"
              exit 1
            fi
            set +e
            xcrun simctl shutdown $XCODE_SIMULATOR_UDID
            # Reset UserDefaults to clean state
            set -e
            xcrun simctl erase $XCODE_SIMULATOR_UDID
            # simctl boot fails if Simulator already booted, ignore
            set +e
            xcrun simctl boot $XCODE_SIMULATOR_UDID
            set -e
            xcrun simctl spawn $XCODE_SIMULATOR_UDID defaults write io.bitrise.BullsEye eventually_succeeding_test_number_of_failures $TEST_APP_NUMBER_OF_INITIAL_TEST_FAILURES

  _set_number_of_initial_test_successes_in_test_app:
    envs:
    - TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES: $TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES
    - XCODE_SIMULATOR_DEVICE: $XCODE_SIMULATOR_DEVICE
    - XCODE_SIMULATOR_OS_VERSION: $XCODE_SIMULATOR_OS_VERSION
    - XCODE_SIMULATOR_PLATFORM: $XCODE_SIMULATOR_PLATFORM
    steps:
    - git::https://github.com/bitrise-steplib/steps-lookup-xcode-simulator:
        inputs:
        - simulator_device: $XCODE_SIMULATOR_DEVICE
        - simulator_os_version: $XCODE_SIMULATOR_OS_VERSION
        - simulator_platform: $XCODE_SIMULATOR_PLATFORM
    - script:
        title: Set number of flaky test number of initial successes on the Simulator for the app io.bitrise.BullsEye
        inputs:
        - content: |-
            set -ex
            if [[ -x $TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES ]]; then
              echo "Variable TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES is unset"
              exit 1
            fi
            set +e
            xcrun simctl shutdown $XCODE_SIMULATOR_UDID
            # Reset UserDefaults to clean state
            set -e
            xcrun simctl erase $XCODE_SIMULATOR_UDID
            # simctl boot fails if Simulator already booted, ignore
            set +e
            xcrun simctl boot $XCODE_SIMULATOR_UDID
            set -e
            xcrun simctl spawn $XCODE_SIMULATOR_UDID defaults write io.bitrise.BullsEye eventually_failing_test_number_of_successes $TEST_APP_NUMBER_OF_INITIAL_TEST_SUCCESSES

  _run:
    before_run:
    - _clear_outputs
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            rm -rf ./_tmp
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
        - repository_url: $TEST_APP_URL
        - clone_into_dir: ./_tmp
        - branch: $TEST_APP_BRANCH
    - certificate-and-profile-installer: { }
    - script:
        title: Set 'collect_simulator_diagnostics' input
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            COLLECT_SIM_DIAGNOSTICS="on_failure"
            if [[ "$EXPECT_TEST_FAILURE" == "true" ]]; then
              COLLECT_SIM_DIAGNOSTICS="never"
            fi
            envman add --key COLLECT_SIM_DIAGNOSTICS --value $COLLECT_SIM_DIAGNOSTICS
    - script:
        title: Set TEST_REPETITION_MODE to 'none' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key TEST_REPETITION_MODE --value ${TEST_REPETITION_MODE-none}
    - script:
        title: Set MAXIMUM_TEST_REPETITIONS to '3' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key MAXIMUM_TEST_REPETITIONS --value ${MAXIMUM_TEST_REPETITIONS-3}
    - script:
        title: Set RELAUNCH_TESTS_FOR_EACH_REPETITION to 'no' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key RELAUNCH_TESTS_FOR_EACH_REPETITION --value ${RELAUNCH_TESTS_FOR_EACH_REPETITION-no}
    - path::./:
        inputs:
        - project_path: ./_tmp/$BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - test_plan: $TEST_PLAN
        - test_repetition_mode: $TEST_REPETITION_MODE
        - maximum_test_repetitions: $MAXIMUM_TEST_REPETITIONS
        - relaunch_tests_for_each_repetition: $RELAUNCH_TESTS_FOR_EACH_REPETITION
        - simulator_device: $XCODE_SIMULATOR_DEVICE
        - simulator_os_version: $XCODE_SIMULATOR_OS_VERSION
        - simulator_platform: $XCODE_SIMULATOR_PLATFORM
        - single_build: $SINGLE_BUILD
        - output_tool: $XCODE_OUTPUT_TOOL
        - is_clean_build: "yes"
        - xcodebuild_test_options: -verbose
        - export_uitest_artifacts: "true"
        - verbose: "yes"
        - should_retry_test_on_fail: $RETRY_ON_FAILURE
        - cache_level: $CACHE_LEVEL
        - collect_simulator_diagnostics: $COLLECT_SIM_DIAGNOSTICS

  _expose_xcode_version:
    steps:
    - script:
        title: Expose Xcode major version
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [[ ! -z "$XCODE_MAJOR_VERSION" ]]; then
              echo "Xcode major version already exposed: $XCODE_MAJOR_VERSION"
              exit 0
            fi

            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ ! $version =~ $regex ]]; then
              echo "Failed to determine Xcode major version"
              exit 1
            fi

            xcode_major_version=${BASH_REMATCH[1]}
            echo "Xcode major version: $xcode_major_version"
            envman add --key XCODE_MAJOR_VERSION --value $xcode_major_version

  _clear_outputs:
    steps:
    - script:
        title: Clear step outputs
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            envman add --key BITRISE_XCODE_TEST_RESULT --value ""
            envman add --key BITRISE_XCRESULT_PATH --value ""
            envman add --key BITRISE_XCODE_TEST_ATTACHMENTS_PATH --value ""
            envman add --key BITRISE_XCODEBUILD_BUILD_LOG_PATH --value ""
            envman add --key BITRISE_XCODEBUILD_TEST_LOG_PATH --value ""

  _check_outputs:
    steps:
    - script:
        title: Check BITRISE_XCODE_TEST_RESULT
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash

            echo "BITRISE_XCODE_TEST_RESULT: $BITRISE_XCODE_TEST_RESULT"
            if [[ $EXPECT_TEST_FAILURE == "true" ]] ; then
              if [[ "$BITRISE_XCODE_TEST_RESULT" != "failed" ]] ; then
                echo "Invalid BITRISE_XCODE_TEST_RESULT value ($BITRISE_XCODE_TEST_RESULT), should be: failed"
                exit 1
              fi
            else
              if [[ "$BITRISE_XCODE_TEST_RESULT" != "succeeded" ]] ; then
                echo "Invalid BITRISE_XCODE_TEST_RESULT value ($BITRISE_XCODE_TEST_RESULT), should be: succeeded"
                exit 1
              fi
            fi
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        is_always_run: true
        inputs:
        - envs:
        - files:
        - dirs: |-
            BITRISE_XCRESULT_PATH
        - deploy_dir: $BITRISE_DEPLOY_DIR
        - deployed_files: |-
            BITRISE_XCODEBUILD_TEST_LOG_PATH
            BITRISE_XCRESULT_ZIP_PATH
        - deployed_dirs:
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        run_if: '{{enveq "SINGLE_BUILD" "false"}}'
        inputs:
        - envs:
        - files:
        - dirs:
        - deploy_dir: $BITRISE_DEPLOY_DIR
        - deployed_files: |-
            BITRISE_XCODEBUILD_BUILD_LOG_PATH
        - deployed_dirs:
    - script:
        title: Check  testing addon support
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash

            # Check and REMOVE test-info.json
            if [ $(find ${BITRISE_TEST_DEPLOY_DIR} -type f -delete -print -regex "${BITRISE_TEST_DEPLOY_DIR}/.*/${BITRISE_SCHEME}/test-info\.json" | grep -q .) ]; then
              echo "${BITRISE_TEST_DEPLOY_DIR} does not contain test-info.json."
              exit 1
            fi

  _check_exported_artifacts:
    steps:
    - script:
        title: Exported attachment test
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ $version =~ $regex ]]; then
              if [[ ${BASH_REMATCH[1]} -ge 11 ]]; then
                exit 0
              fi
            fi

            if [ ! -f $BITRISE_DEPLOY_DIR/ios-simple-objc-xc-test-Attachments.zip ]; then
                echo "Exported artifacts - ios-simple-objc-xc-test-Attachments.zip - not found in $BITRISE_DEPLOY_DIR"
                exit 1
            fi

            echo "Exported attachments found: $BITRISE_DEPLOY_DIR/ios-simple-objc-xc-test-Attachments.zip"

  _check_xcpretty_html_report:
    steps:
    - script:
        title: Check xcpretty html report
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [ ! -f $BITRISE_DEPLOY_DIR/xcode-test-results-ios-simple-objc.html ]; then
                echo "Exported xcpretty html report - xcode-test-results-ios-simple-objc.html - not found in $BITRISE_DEPLOY_DIR"
                exit 1
            fi

            echo "Exported xcpretty html report found: $BITRISE_DEPLOY_DIR/xcode-test-results-ios-simple-objc.html"

  _check_cache:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            if [[ -z "$BITRISE_CACHE_EXCLUDE_PATHS" ]] ; then
                echo "BITRISE_CACHE_EXCLUDE_PATHS is empty"
                exit 1
            fi
            if [[ -z "$BITRISE_CACHE_INCLUDE_PATHS" ]] ; then
                echo "BITRISE_CACHE_INCLUDE_PATHS is empty"
                exit 1
            fi
